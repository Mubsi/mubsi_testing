{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "954b782c",
   "metadata": {},
   "source": [
    "# Programming Assignment üìö\n",
    "\n",
    "Welcome to to programming assignment of the second module of this course! \n",
    "\n",
    "Get ready to put your Python skills to the test. In this assignment, you'll be a librarian, managing the book records. Let's get started! üöÄ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca042bb7",
   "metadata": {},
   "source": [
    "#### Before you begin üö¶\n",
    "\n",
    "Before you get started, as before, import `test_your_code` so that your implementated code can be tested.\n",
    "\n",
    "     Cells that include the tag `### Test your code. Run this.` cannot be edited. Run them as they are."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5105bfd",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "import test_your_code"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd718fa5",
   "metadata": {},
   "source": [
    "## Exercise 1: The Bookworm's Inventory üìñ\n",
    "\n",
    "Imagine you're a librarian, and a request just came in for the classic novel \"To Kill a Mockingbird\". üê¶  Before you can tell the eager reader if it's available, you need to check your records.\n",
    "\n",
    "You first need to represent a book's information using a Python dictionary. This dictionary will store the following details about the book:\n",
    "\n",
    "- `title` (string): The title of the book.\n",
    "- `author` (string): The author of the book.\n",
    "- `on_shelf` (boolean): Whether the book is currently on the shelf (`True`) or checked out (`False`).\n",
    "- `borrower` (string): The name of the person who has borrowed the book (if it's checked out).\n",
    "- `overdue` (boolean): Whether the book is overdue (`True`) or not (`False`).\n",
    "- `on_hold` (boolean): Whether the book is on hold for another patron (`True`) or not (`False`).\n",
    "\n",
    "\n",
    "**Your Task:** Initialize the dictionary `book` with the following key/value pairs:\n",
    "\n",
    "- `title`: To Kill a Mockingbird\n",
    "- `author`: Harper Lee\n",
    "- `on_shelf`: False\n",
    "- `borrower`: Arthur Dent\n",
    "- `overdue`: True\n",
    "- `on_hold`: False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4e586c4",
   "metadata": {
    "deletable": false
   },
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "# Create the dictionary, \"book\", with key/value pairs as mentioned above\n",
    "# Please be sure to use the same upper/lower case spellings structure\n",
    "### START OMIT BLOCK ###\n",
    "book = {\n",
    "    'title': 'To Kill a Mockingbird',\n",
    "    'author': 'Harper Lee',\n",
    "    'on_shelf': False,\n",
    "    'borrower': 'Arthur Dent',\n",
    "    'overdue': True,\n",
    "    'on_hold': False\n",
    "}\n",
    "### END OMIT BLOCK ###\n",
    "# Add your code here\n",
    "\n",
    "### END CODE HERE ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f339f50b",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_your_code.test_exercise_1(book)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "248e6a2e",
   "metadata": {},
   "source": [
    "## Exercise 2: Is It On the Shelf? ü§î\n",
    "\n",
    "The moment of truth has arrived!  The eager reader is waiting to hear if \"To Kill a Mockingbird\" is available.  You need to check the `book` dictionary to see if it's available for checkout. \n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "Write an `if/else` statement that determines whether the book is available to borrow. \n",
    "\n",
    "- **If** the book is `on_shelf` (meaning `on_shelf` is `True`) **and** it's **not** `on_hold` (meaning `on_hold` is `False`), print: `\"Book is available to be borrowed\"`. \n",
    "- **Else**, print: `\"Book is not available to be borrowed\"`.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a334b64",
   "metadata": {
    "deletable": false,
    "name": "exercise_2"
   },
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "# Create an if/else statment\n",
    "# Check if \"book['on_shelf']\" equals \"True\" and \"book['on_hold']\" equals \"False\" \n",
    "if book['on_shelf'] == True and book['on_hold'] == False: # @REPLACE # Add your if statment here\n",
    "    \n",
    "    # Print \"Book is available to be borrowed\"\n",
    "    print(\"Book is available to be borrowed\") # @REPLACE # Add your print here\n",
    "    \n",
    "else: # @REPLACE # Add your else statment here\n",
    "    \n",
    "    # Print \"Book is not available to be borrowed\"\n",
    "    print(\"Book is not available to be borrowed\") # @REPLACE # Add your print here\n",
    "\n",
    "### END CODE HERE ###"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f480ccdf",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "\n",
    "```\n",
    "Book is not available to be borrowed\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97b11376",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_your_code.exercise_2()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec0f6b3c",
   "metadata": {},
   "source": [
    "## Exercise 3: On Hold or Overdue? ‚è≥\n",
    "\n",
    "Sadly, it turns out that \"To Kill a Mockingbird\" is currently checked out. üò©  However, the interested reader would like to be next in line!  You need to put the book on hold for them, but first, you want to check if it's overdue.\n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "Write an `if/else` statement that does the following:\n",
    "\n",
    "- **If** the book is `overdue` (meaning `overdue` is `True`), print: `\"Book is overdue - Contact <Borrower's name> to return it\"` (make sure to replace `<Borrower's name>` with the actual borrower's name from the dictionary `book`). **You can use an f-string to insert the borrower's name**. \n",
    "- **Else**:\n",
    "    - Set the `on_hold` status of the book to `True` because you're now placing it on hold for the next reader.\n",
    "    - Print: `\"Book has been put on hold\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f1e81f3",
   "metadata": {
    "deletable": false,
    "name": "exercise_3"
   },
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "# Create an if/else statment\n",
    "# Check if \"book['overdue']\" equals \"True\"\n",
    "if book['overdue'] == True: # @REPLACE # Add your if statment here\n",
    "    \n",
    "    # Print \"Book is overdue - Contact <Borrower's name> to return it\"\n",
    "    # Hint: Use print with f-string to get \"book['borrower']\"'s name\n",
    "    print(f\"Book is overdue - Contact {book['borrower']} to return it\") # @REPLACE # Add your print here\n",
    "    \n",
    "else: # @REPLACE # Add your else statment here\n",
    "    \n",
    "    # Set \"book['on_hold']\" to \"True\"\n",
    "    book['on_hold'] = True # @REPLACE # Add your print here\n",
    "    \n",
    "    # Print \"Book has been put on hold\"\n",
    "    print(\"Book has been put on hold\") # @REPLACE # Add your print here\n",
    "\n",
    "### END CODE HERE ###"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5cb147",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "\n",
    "```\n",
    "Book is overdue - Contact Arthur Dent to return it\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc6a80e7",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_your_code.exercise_3()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27c657f3",
   "metadata": {},
   "source": [
    "## Exercise 4: Tracking Down the Borrower üîé\n",
    "\n",
    "\"To Kill a Mockingbird\" is indeed overdue! It seems Arthur Dent has been enjoying it a little too long. You need to send him a friendly reminder email. However, you only have his name ‚Äì you need to find his email address from the library's records.\n",
    "\n",
    "You have a list called `borrowers_list` (provided below) that contains dictionaries. Each dictionary in the list represents a borrower and has their `name`, `email`, and `phone`. Your task is to find Arthur Dent's email address from this list. Run the cell below to load the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a0a8341",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# List of dictionaries with borrower contact information\n",
    "borrowers_list = [\n",
    "    {\n",
    "        \"name\": \"Alice Johnson\",\n",
    "        \"email\": \"alice.johnson@dlailibray.com\",\n",
    "        \"phone\": \"+1111111111\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"Bob Smith\",\n",
    "        \"email\": \"bob.smith@dlailibray.com\",\n",
    "        \"phone\": \"+2222222222\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"Arthur Dent\",\n",
    "        \"email\": \"arthur.dent@dlailibray.com\",\n",
    "        \"phone\": \"+3333333333\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"Diana Prince\",\n",
    "        \"email\": \"diana.prince@dlailibray.com\",\n",
    "        \"phone\": \"+4444444444\"\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa47a8ca",
   "metadata": {},
   "source": [
    "**Your Task:** Get `Arthur Dent`'s email from your records of `borrowers_list`\n",
    "\n",
    "* Use a **for** loop to iterate through `borrowers_list`.\n",
    "* Check **if** the name in `book['borrower']` matches with a \"name\" present in the `borrowers_list`\n",
    "    - If the name matches, store the corresponding \"email\" in a variable `borrower_email`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17672ab7",
   "metadata": {
    "deletable": false
   },
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "# Iterate through the borrowers_list\n",
    "# Look for 'borrower' in `borrowers_list`\n",
    "for borrower in borrowers_list: # @REPLACE # Add your 'for' loop here\n",
    "    \n",
    "    # Check if the name \"book['borrower']\" equals \"borrower['name']\"\n",
    "    if book['borrower'] == borrower['name']: # @REPLACE # Add your if statment here\n",
    "        \n",
    "        # Set \"borrower_email\" equals \"borrower['email']\"\n",
    "        borrower_email = borrower['email'] # @REPLACE EQUALS # Add your code here\n",
    "\n",
    "### END CODE HERE ###\n",
    "\n",
    "# Print the information\n",
    "print(f\"{book['borrower']}'s email is: {borrower_email}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13ed125c",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "```\n",
    "Arthur Dent's email is: arthur.dent@dlailibray.com\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "535506ff",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_your_code.test_exercise_4(borrower_email)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acc07e39",
   "metadata": {},
   "source": [
    "## Exercise 5: The LLM to the Rescue! ü§ñ\n",
    "\n",
    "You've got Arthur's email address ‚Äì great! Now, it's time to write him that overdue notice. To make your life easier, you decide to use an LLM (Large Language Model) to generate the email for you. LLMs are excellent at understanding instructions and crafting text. \n",
    "\n",
    "First, let's collect all of the information you want your `prompt` to include for the LLM to generate the email. Run the next cell to do that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8e015eb",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Name of the borrower\n",
    "person_name = book['borrower']\n",
    "\n",
    "# Name of the book\n",
    "book_name = book['title']\n",
    "\n",
    "# Name of book's author\n",
    "book_author = book['author']\n",
    "\n",
    "# Due Date\n",
    "due_date = \"16 November 2024\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c50ddc4",
   "metadata": {},
   "source": [
    "**Your Task:** \n",
    "\n",
    "Write a `prompt` that asks the LLM to generate an email to `person_name`, requesting them to return the book `book_name` by `book_author` before the `due_date`.\n",
    "\n",
    "    You have the flexibility to structure your prompt and wording as you see fit. The key is to include all four pieces of information (`person_name`, `book_name`, `book_author`, and `due_date`) naturally within the `prompt`'s instructions. \n",
    "\n",
    "    For example, your prompt could look something like this: \n",
    "    \"Please write a polite email to [person_name], reminding them to return the book [book_name] by [book_author].  The book was due on [due_date].\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8830078b",
   "metadata": {},
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "### START OMIT BLOCK ###\n",
    "prompt = f\"\"\"\n",
    "Write an email to {person_name}, asking them to return the book {book_name} by the author {book_author} \\\n",
    "before the due date of {due_date}.\n",
    "\"\"\"\n",
    "### END OMIT BLOCK ###\n",
    "prompt = f\"\"\"\n",
    "# Add your code here\n",
    "\"\"\"\n",
    "\n",
    "### END CODE HERE ###\n",
    "\n",
    "print(prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d816686",
   "metadata": {},
   "source": [
    "#### Expected Output\n",
    "```\n",
    "Your prompt containing the following details of:\n",
    "- Arthur Dent\n",
    "- To Kill a Mockingbird\n",
    "- Harper Lee\n",
    "- 16 November 2024\n",
    "\n",
    "```\n",
    "\n",
    "**Note:** You will fail the below test if your prompt excludes any one of the above mentioned details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07d9a437",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_your_code.test_exercise_5(prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0f3157c",
   "metadata": {},
   "source": [
    "### Submission Note:\n",
    "\n",
    "If you have passed all the tests upto this point, you can submit your assignment. Everything below this is OPTIONAL and will not affect your grading in anyway."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f1fd1e9",
   "metadata": {},
   "source": [
    "Time to use the LLM! Let's import the `get_llm_response` function from the helper functions file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c6fd695",
   "metadata": {},
   "outputs": [],
   "source": [
    "from helper_functions import get_llm_response"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9dbd4dd",
   "metadata": {},
   "source": [
    "Pass your `prompt` to the `get_llm_response` function, and print the response."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da10423d",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(get_llm_response(prompt))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b55205a7",
   "metadata": {},
   "source": [
    "**Congratulations on finishing this module's assignment!** üéâ You've successfully used your Python skills to help the librarian manage book records, find borrower information, and even draft an email using an LLM. Great work! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5cd14bb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
