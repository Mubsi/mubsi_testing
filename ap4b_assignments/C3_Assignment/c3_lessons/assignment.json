{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f13eafaf",
   "metadata": {},
   "source": [
    "# Programming Assignment: Pluto's Poetic Journey üöÄ \n",
    "\n",
    "Welcome to your next mission! üßë‚ÄçüöÄ In this exciting adventure, you'll be diving into the fascinating world of space exploration and poetry (yes, you read that right, poetry! üñãÔ∏è). You'll be using Python to analyze a captivating news article about the New Horizons spacecraft's journey to Pluto and its discoveries. Get ready to flex your coding muscles and unleash your inner poet! üí´\n",
    "\n",
    "## The Mission Briefing üì∞\n",
    "\n",
    "Your mission begins with a [news article](https://edition.cnn.com/2020/07/15/world/pluto-new-horizons-anniversary-scn-trnd/index.html) detailing the incredible findings from the New Horizons mission. The spacecraft has sent back a treasure trove of information about the dwarf planet Pluto, revealing its secrets and captivating our imaginations. However, the article is quite long, and you need a more efficient way to understand its key themes.\n",
    "\n",
    "Time for you Python skills to blast off! üöÄ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dddd11e7",
   "metadata": {},
   "source": [
    "#### Before you begin üö¶\n",
    "\n",
    "Before you get started, as before, import `test_your_code` so that your implementated code can be tested.\n",
    "\n",
    "     Cells that include the tag `# Test your code!` cannot be edited. Run them as they are.\n",
    "     \n",
    "Run the cell below to load the functions you'll be needing in this assignment.     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c62e81b9",
   "metadata": {
    "deletable": false,
    "editable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "import test_your_code\n",
    "from helper_functions import get_llm_response, print_formatted_list, print_formatted_list_of_dict, download_file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feec088c",
   "metadata": {},
   "source": [
    "#### TIPS FOR SUCCESSFUL GRADING OF YOUR ASSIGNMENT:\n",
    "\n",
    "- The `### START CODE HERE ###` and `### END CODE HERE ###` comments are meant to signal in what parts of the assignment you are supposed to fill in your solutions.\n",
    "\n",
    "- All cells are frozen except for the ones where you need to submit your solutions or when explicitly mentioned you can interact with it.\n",
    "\n",
    "- The grader will only take into account the cells that are already provided for you so make sure to fill your solution code in those cells.\n",
    "\n",
    "- After each exercise there are cells that use the `test_your_code` from above. Make sure to run these as they will provide you with feedback regarding your solutions.\n",
    "\n",
    "- To submit your notebook, save it and then click on the blue submit button at the beginning of the page.\n",
    "\n",
    "With that out of the way, let's begin!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0af9fc74",
   "metadata": {},
   "source": [
    "## Exercise 1: Encountering Data - Reading the News Article üõ∞Ô∏è\n",
    "\n",
    "First things first, you need to access the news article. It's like receiving a transmission from a faraway probe - you need to decode it first. \n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "* Define a Python function called `read_article` that takes a `text_file` (string) as a parameter and reads the contents of the file. The function should return the contents of the file.\n",
    "\n",
    "<span style=\"color: blue;\">**Hint**</span>: You can refer to the classroom lesson *Turning code blocks into reusable functions* for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b38da36",
   "metadata": {
    "deletable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "# Define a Python function \"read_article\" and pass \"text_file\" as parameter\n",
    "def read_article(text_file):\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    # \"Open\" \"text_file\" in \"read\" mode\n",
    "    f = # Add your code here\n",
    "    \n",
    "    # Use \"f.read()\" to read the file into \"contents\"\n",
    "    contents = # Add your code here\n",
    "    \n",
    "    # Close the file \"f.close()\"\n",
    "    # Add your code here\n",
    "    \n",
    "    # Return \"contents\"\n",
    "    return # Add your return variable here\n",
    "    \n",
    "    ### END CODE HERE ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d48d45f9",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Test your code!\n",
    "test_your_code.exercise_1(read_article)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55be40ce",
   "metadata": {},
   "source": [
    "## Exercise 2: Decoding the Cosmos - Extracting Key Topics üî≠\n",
    "\n",
    "Great work, your `read_article` function is working like a charm! Use it to receive your transmission:\n",
    "\n",
    "You'll be using the news article [5 years after its Pluto flyby, New Horizons spacecraft forges ahead](https://edition.cnn.com/2020/07/15/world/pluto-new-horizons-anniversary-scn-trnd/index.html), published on July 15, 2020, written by CNN. This article has been saved in a `news_article.txt` file in your workspace.\n",
    "\n",
    "Print the contents of this news article."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8961675",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "news_article = read_article(\"news_article.txt\")\n",
    "print(news_article)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5096cb79",
   "metadata": {},
   "source": [
    "That is a lengthy article! To decipher its secrets without reading every word, employ a powerful tool: a Large Language Model (LLM). Think of it as your trusty AI assistant, capable of understanding and summarizing vast amounts of information. üß†\n",
    "\n",
    "You'll ask the LLM to analyze the news article and extract three key topics discussed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "914ae915",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "prompt = f\"\"\"\n",
    "Read the contents of file {news_article}, and extract the key topics discussed in it. Provide exactly 3 key topics.\n",
    "Each topic should not be more than 8 words.\n",
    "\n",
    "Provide each topic in a new line.\n",
    "\n",
    "Output Format:\n",
    "topic_1\n",
    "\n",
    "topic_2\n",
    "\n",
    "topic_3\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "response = get_llm_response(prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f4ecfce",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Print the response\n",
    "print(response)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af6039a4",
   "metadata": {},
   "source": [
    "**Your Task:**\n",
    "\n",
    "Turn these topics into a single Python list.\n",
    "* Copy/paste the topics generated from `response` above into the `key_topics` list below.\n",
    "\n",
    "Be sure that:\n",
    "* Each topic is stored as a \"string\"\n",
    "* There are no duplicate topics in your list\n",
    "* Don't forget to use a comma `,` after each entry in the list. For example:\n",
    "\n",
    "```python\n",
    "\tkey_topics = [\n",
    "\t\t\"Topic 1\",\n",
    "\t\t\"Topic 2\",\n",
    "\t\t\"Topic 3\"\n",
    "\t]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1849c026",
   "metadata": {
    "deletable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "key_topics = [\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    \"Copy/Paste your first topic as a string in here\",\n",
    "    \n",
    "    \"Copy/Paste your second topic as a string in here\",\n",
    "    \n",
    "    \"Copy/Paste your third topic as a string in here\"\n",
    "    \n",
    "    ### END CODE HERE ###\n",
    "\n",
    "]\n",
    "\n",
    "print_formatted_list(key_topics)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4d47a9d",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "```\n",
    "[\n",
    "    Unique Topic 1 as a string,\n",
    "    Unique Topic 2 as a string,\n",
    "    Unique Topic 3 as a string\n",
    "]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee125319",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Test your code!    \n",
    "test_your_code.exercise_2(key_topics)    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb80a2f8",
   "metadata": {},
   "source": [
    "## Exercise 3: The Poet's Palette - Organizing Your Topics üé® \n",
    "\n",
    "Excellent work, your `key_topics` list is ready for action! Now, imagine you want to write a poem inspired by these topics, but you're not particularly fond of one or more of them.\n",
    "\n",
    "To give you more control over your creative process, you'll be crafting a list of dictionaries, with each dictionary representing a topic and a special \"switch\" called `to_use`. This \"switch\" will tell the LLM whether or not to include a particular topic in the poem. It's like having a poet's palette, carefully selecting the colors and themes you want to use in your masterpiece! üé®\n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "Create a list of dictionaries `topics_to_use` with each topic from the list `key_topics` and a switch `to_use`. \n",
    "\n",
    "In each dictionary:\n",
    "* Use the list `key_topics` to get the topic and add them into the new dictionary.\n",
    "* Add a boolean value `to_use` (True would mean to use it in the Poem, False would mean not to use). Feel free to put True/False as you desire.\n",
    "\n",
    "Be sure that:\n",
    "* There are no duplicate topics in your list\n",
    "* Don't forget to use a comma `,` after each entry in the dictionary and after each dictionary. For example:\n",
    "```python\n",
    "\t{\n",
    "\t\t\"Topic 1\": your topic,\n",
    "\t\t\n",
    "\t\t\"to_use\": a boolean value\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"Topic 2\": your topic,\n",
    "\t\t\n",
    "\t\t\"to_use\": a boolean value\n",
    "\t}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1134a06",
   "metadata": {
    "deletable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "topics_to_use = [\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    {\n",
    "        # Use your the \"first\" entry from \"key_topics\" as \"Topic 1\"\n",
    "        # Hint: Remember, in Python, counting starts from zero (0)\n",
    "        \"Topic 1\": # First element from the list \"key_topics\" goes here,\n",
    "        \n",
    "        # Use a boolean value (True or False) for \"to_use\"\n",
    "        \"to_use\": # Add boolean value here\n",
    "    },\n",
    "    {\n",
    "        # Use your the \"second\" entry from \"key_topics\" as \"Topic 2\"\n",
    "        \"Topic 2\": # Second element from the list \"key_topics\" goes here,\n",
    "        \n",
    "        # Use a boolean value (True or False) for \"to_use\"\n",
    "        \"to_use\": # Add boolean value here\n",
    "    },\n",
    "    {\n",
    "        # Use your the \"third\" entry from \"key_topics\" as \"Topic 3\"\n",
    "        \"Topic 3\": # Third element from the list \"key_topics\" goes here,\n",
    "        \n",
    "        # Use a boolean value (True or False) for \"to_use\"\n",
    "        \"to_use\": # Add boolean value here\n",
    "    }\n",
    "    \n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "]\n",
    "    \n",
    "print_formatted_list_of_dict(topics_to_use)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f5ea878",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "```\n",
    "[\n",
    "    {\n",
    "        \"Topic 1\": Unique Topic 1 as a string,\n",
    "        \"to_use\": A boolean value,\n",
    "    },\n",
    "    {\n",
    "        \"Topic 2\": Unique Topic 2 as a string,\n",
    "        \"to_use\": A boolean value,\n",
    "    },\n",
    "    {\n",
    "        \"Topic 3\": Unique Topic 3 as a string,\n",
    "        \"to_use\": A boolean value,\n",
    "    }\n",
    "]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "385b80c8",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Test your code!    \n",
    "test_your_code.exercise_3(topics_to_use)    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d4b81c5",
   "metadata": {},
   "source": [
    "## Exercise 4: Cosmic Sonnets - Writing Your Space Poem üñãÔ∏è\n",
    "\n",
    "With your `topics_to_use` list ready, it's time to enlist the LLM once again, this time for a more creative task: crafting your space poem! üå†\n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "Write a `prompt` that asks the LLM to generate a `poem`. The `poem` should be of exactly `4 (four)` `lines (line)`. Your `prompt` should also include the `topics_to_use` list.\n",
    "\n",
    "    You have the flexibility to structure your prompt and wording as you see fit. The key is to include all three pieces of information (`topics_to_use` list, mention of writing a \"poem\" and using only \"4 (four) lines (line)\") naturally within the `prompt`'s instructions. \n",
    "\n",
    "    For example, your prompt could look something like this: \n",
    "    \"Using only the topics from the list <topics_to_use>, write a 4-line poem.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01aa0a13",
   "metadata": {
    "deletable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "### START CODE HERE ###\n",
    "\n",
    "prompt = f\"\"\"\n",
    "# Add your code here\n",
    "\"\"\"\n",
    "\n",
    "### END CODE HERE ###\n",
    "\n",
    "print(prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a66e63d",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "```\n",
    "Your prompt containing the following details:\n",
    "- `topics_to_use` list\n",
    "- Instructions of writing a \"poem\"\n",
    "- Using only \"4 (four) lines (line)\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec21a52",
   "metadata": {},
   "source": [
    "**Note:** You will fail the below test if your prompt excludes any one of the above mentioned details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d906b86",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Test your code!    \n",
    "test_your_code.exercise_4(prompt, topics_to_use)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1272e475",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "poem = get_llm_response(prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5ecfa35",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Print your poem\n",
    "print(poem)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc435ce3",
   "metadata": {},
   "source": [
    "## Exercise 5: Preserving the Verse - Saving Your Poem üíæ \n",
    "\n",
    "Your poem is a masterpiece! But like a fading transmission, it won't last forever unless you store it properly.\n",
    "\n",
    "**Your Task:**\n",
    "\n",
    "* Create a Python function called `save_to_file` that uses the parameter `contents_to_save` (a string) and saves it in a file called `poem.txt`.\n",
    "\n",
    "<span style=\"color: blue;\">**Hint**</span>: You can refer to the classroom lesson *Extracting restaurant information from journal entries* for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "146ba041",
   "metadata": {
    "deletable": false,
    "tags": [
     "graded"
    ]
   },
   "outputs": [],
   "source": [
    "# Define a Python function \"save_to_file\" and pass \"contents_to_save\" as parameter\n",
    "def save_to_file(contents_to_save):\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    # Using \"Open\", open or create a text file `poem.txt` in \"write\" mode\n",
    "    f = open(\"poem.txt\", '# Add your code here')\n",
    "    \n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Write \"contents_to_save\" in the file `poem.txt`\n",
    "    f.write(contents_to_save)\n",
    "    \n",
    "    # Close the file\n",
    "    f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bbf26ed",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Test your code!    \n",
    "test_your_code.exercise_5(save_to_file) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30080fa8",
   "metadata": {},
   "source": [
    "Save your poem in the file!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "615da860",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "save_to_file(poem)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb0c6d49",
   "metadata": {},
   "source": [
    "You can use the following button to download the file you just wrote above.\n",
    "\n",
    "* Make sure to provide the right file name: `poem.txt` when asked!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2268b1c8",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "download_file()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ab954f5",
   "metadata": {},
   "source": [
    "## Mission Accomplished! üéâ\n",
    "\n",
    "Congratulations on completing this stellar coding adventure! You've successfully used Python to explore a news article, extract key topics, and even generate a space-themed poem! As you continue your coding journey, remember that the possibilities are as boundless as the universe itself. üöÄ Keep exploring, keep creating, and never stop reaching for the stars! ‚ú®"
   ]
  }
 ],
 "metadata": {
  "grader_version": "1",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
