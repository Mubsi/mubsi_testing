# Programming Assignment: The Ultimate Candy Challenge üç¨

Welcome, Python wizards! üßô‚Äç‚ôÄÔ∏èüßô‚Äç‚ôÇÔ∏è Get ready to put your newfound Python skills to the test with this sweet assignment. You'll embark on a quest through the enchanting world of candy data, using your programming prowess to unravel its delicious secrets. üç≠üç´

**Story Time:**

Imagine you're the newest intern at a famous candy factory üè≠, "Sugar Rush Delights". The factory is buzzing with excitement for their annual "Ultimate Candy Challenge".  Your mission, should you choose to accept it, is to analyze data from past challenges to predict the potential winners of this year's competition.  Think you're up to the challenge? üòé 

## Exercise 1: Unwrapping the Data üéÅ

Your first task is to import a function from your trusty toolkit, `helper_functions.py`. This function, `read_candy_data`, will help you access the candy data from previous "Ultimate Candy Challenges".

**Instructions:**

1. Import the `read_candy_data` function from `helper_functions.py`.
2. Use this function to load the candy data from the file `candy_data.csv` and store it in a variable called `candy_data`.
3. Print the first 5 rows of `candy_data` to get a glimpse of the sweet treasures it holds.

```python
# Import the necessary function

# Load the candy data

# Print the first 5 rows of the data
### THIS IS SOLUTION CODE
from helper_functions import read_candy_data

candy_data = read_candy_data('candy_data.csv')

for i in range(5):
    print(candy_data[i])
### SOLUTION CODE ENDS
```

```python
import unittest

class TestExercise1(unittest.TestCase):
    def test_output(self):
        self.assertEqual(type(candy_data), list)
        self.assertEqual(len(candy_data), 75)
        self.assertEqual(candy_data[0]['Candy Name'], '100 Grand Bar')
        self.assertEqual(candy_data[0]['Popularity Score'], 67)
        print("Test passed") # This should print if the implementation is correct.

unittest.main(argv=[''], verbosity=2, exit=False)
```

## Exercise 2: Sweet Statistics üìä

Now that you've unwrapped the data, let's dive into some statistical analysis.  The factory chefs are curious about the average popularity score of all candies. 

**Instructions:**

1. Import the `mean` function from the `statistics` module.
2. Calculate the average popularity score from the 'Popularity Score' column in `candy_data` and store it in a variable called `avg_popularity`.
3. Print `avg_popularity` to reveal the average sweetness level!

```python
# Import the required function

# Calculate the average popularity score

# Print the average popularity score
### THIS IS SOLUTION CODE
from statistics import mean

popularity_scores = [int(candy['Popularity Score']) for candy in candy_data]
avg_popularity = mean(popularity_scores)

print(avg_popularity)
### SOLUTION CODE ENDS
```

```python
import unittest

class TestExercise2(unittest.TestCase):
    def test_output(self):
        self.assertEqual(round(avg_popularity,2), 50.13)
        print("Test passed")

unittest.main(argv=[''], verbosity=2, exit=False)
```

## Exercise 3: Scrumptious Descriptions üç´üèÜ

"Sugar Rush Delights" wants to create an online candy catalog for the "Ultimate Candy Challenge". They need you to fetch descriptions of the most popular candies from a reliable source, `www.candystore.com`.

**Instructions:**

1. Install the `beautifulsoup4` package using pip: `!pip install beautifulsoup4`
2. Import the `BeautifulSoup` function from `bs4` and the `requests` module.
3. Define a function `get_candy_description(candy_name)` that: 
    - Takes a candy name as input.
    - Constructs a URL to the candy's page on `www.candystore.com`.  For example: "https://www.candystore.com/reese-s-peanut-butter-cups/"
    - Uses `requests.get()` to fetch the HTML content of the page.
    - Uses `BeautifulSoup` to parse the HTML and find the description. You can assume the description is in a `<p>` tag with the class 'product-description'.
    - Returns the description.
4. Create a list of the top 3 most popular candies from Exercise 2. You can use code from the previous exercise, but will need to sort the list by popularity and take the top 3.
5. Use a loop to iterate through the list of top candies and:
    - Call `get_candy_description` to fetch the description of each candy.
    - Print the candy name and its description.

```python
# Install beautifulsoup4
!pip install beautifulsoup4

# Import necessary functions and modules

# Define get_candy_description(candy_name) function

# Get the top 3 most popular candies
### THIS IS SOLUTION CODE
from bs4 import BeautifulSoup
import requests

def get_candy_description(candy_name):
    """
    Fetches the description of a candy from www.candystore.com.

    Args:
        candy_name (str): The name of the candy.

    Returns:
        str: The description of the candy.
    """
    # Construct the URL
    url = f"https://www.candystore.com/{candy_name.lower().replace(' ', '-')}/"
    
    # Fetch the HTML content
    response = requests.get(url)
    
    # Parse the HTML
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # Find the description
    description = soup.find('p', class_='product-description').text
    
    return description

# Get the top 3 most popular candies from Exercise 2
candy_data.sort(key=lambda x: int(x['Popularity Score']), reverse=True)
top_3_candies = [candy['Candy Name'] for candy in candy_data[:3]]

# Iterate through the top candies and print their descriptions
for candy_name in top_3_candies:
    description = get_candy_description(candy_name)
    print(f"Candy Name: {candy_name}")
    print(f"Description: {description}\n")
### SOLUTION CODE ENDS
```

```python
import unittest
from bs4 import BeautifulSoup
import requests

class TestExercise3(unittest.TestCase):
    def test_get_candy_description(self):
        self.assertIn("chocolate", get_candy_description("Reese‚Äôs Peanut Butter Cups").lower())
        self.assertIn("chocolate", get_candy_description("Reese‚Äôs Miniatures").lower())
        self.assertIn("caramel", get_candy_description("Twix").lower())
        print("Test passed")
        
unittest.main(argv=[''], verbosity=2, exit=False)
```


## Exercise 4:  Conquering Europe with Candy üá™üá∫

"Sugar Rush Delights" is planning to expand to Europe! üåç  But before they launch, they need to understand how their candy prices compare to the European market.  They've asked you to convert their most popular candy's price from USD to EUR using the current exchange rate.

**Instructions:**

1. Install the `frankfurter` package: `!pip install frankfurter`
2. Import the `frankfurter` module.
3. Define a function `convert_usd_to_eur(usd_amount, date)` that:
    - Takes the USD amount and a date string in the format "YYYY-MM-DD" as input.
    - Uses the `frankfurter` module to fetch the USD to EUR exchange rate for the given date. You'll use `frankfurter.get_rates(date)` to get the exchange rates dictionary for the date.  You can then use the dictionary key `'EUR'` to access the exchange rate value.  
    - Calculates the equivalent EUR amount.
    - Returns the EUR amount.
4. Imagine the most popular candy from Exercise 2 costs $2.50 USD.
5. Use the `convert_usd_to_eur` function to convert the price to EUR for November 11, 2024.
6. Print the original USD price and the converted EUR price.

```python
# Install frankfurter
!pip install frankfurter

# Import the necessary module

# Define convert_usd_to_eur(usd_amount, date) function

# Define the USD price of the candy

# Convert the price to EUR

# Print the USD and EUR prices
### THIS IS SOLUTION CODE
import frankfurter

def convert_usd_to_eur(usd_amount, date):
    """
    Converts USD to EUR using the Frankfurter API.

    Args:
        usd_amount (float): The amount in USD.
        date (str): The date for the exchange rate (YYYY-MM-DD).

    Returns:
        float: The equivalent amount in EUR.
    """
    # Fetch the exchange rates
    rates = frankfurter.get_rates(date)
    
    # Calculate the EUR amount
    eur_amount = usd_amount * rates['EUR']
    
    return eur_amount

usd_price = 2.50
eur_price = convert_usd_to_eur(usd_price, "2024-11-11")

print(f"USD Price: ${usd_price:.2f}")
print(f"EUR Price: ‚Ç¨{eur_price:.2f}")
### SOLUTION CODE ENDS
```

```python
import unittest

class TestExercise4(unittest.TestCase):
    def test_convert_usd_to_eur(self):
        self.assertEqual(round(convert_usd_to_eur(1, "2022-01-01"), 2), 0.88)
        print("Test passed")

unittest.main(argv=[''], verbosity=2, exit=False)
```

## Exercise 5: The LLM's Prediction üîÆ

"Sugar Rush Delights" has a tradition of asking a special guest, the all-knowing LLM, to predict the "Ultimate Candy" winner. 

**Instructions:**

1. Create a prompt asking the LLM to predict this year's winner based on the top 5 most popular candies from `candy_data`.
2. Use the `get_llm_response` function from `aisetup` to get the LLM's prediction.
3. Print the LLM's wise prediction.

```python
# Import the necessary function 

# Create the prompt

# Get the LLM's prediction

# Print the prediction
### THIS IS SOLUTION CODE
from aisetup import get_llm_response

candy_data.sort(key=lambda x: int(x['Popularity Score']), reverse=True)
top_5_candies = [candy['Candy Name'] for candy in candy_data[:5]]
prompt = f"""Predict the winner of the Ultimate Candy Challenge based on the following top 5 most popular candies from previous years: {', '.join(top_5_candies)}."""

prediction = get_llm_response(prompt)
print(f"The LLM predicts that the winner will be: {prediction}")
### SOLUTION CODE ENDS
```

```python
import unittest

class TestExercise5(unittest.TestCase):
    def test_output(self):
        self.assertIn('Reese', prediction)
        print("Test passed")

unittest.main(argv=[''], verbosity=2, exit=False)
```

Congratulations! üéâ You've successfully navigated the sugary landscape of the "Ultimate Candy Challenge" using your Python magic. ü™Ñ Now, sit back, relax, and enjoy a well-deserved treat! üç¨ 

### EXPECTED RELEVANT FILES AND FUNCTIONS ####

```python
# helper_functions.py

import csv

def read_candy_data(file_path):
    """
    Reads candy data from a CSV file.

    Args:
        file_path (str): The path to the CSV file.

    Returns:
        list: A list of dictionaries, where each dictionary represents a candy.
    """
    candy_data = []
    with open(file_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            candy_data.append(row)
    return candy_data

```
