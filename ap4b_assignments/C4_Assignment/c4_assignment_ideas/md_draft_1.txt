# Programming Assignment: üç≠ Candy Data Analysis üìä

Welcome to this programming assignment! üéâ You've landed a really sweet gig as a data analyst for a popular candy company. üç¨ Your first mission, should you choose to accept it, is to dive into some data about different candies, figure out which ones are the most popular, and give the marketing team some insights to sweeten their campaigns.  üí™ Let's get started!

## Before you begin üö¶

Before you get started, as before, import `test_learner_implementation` so that your implementated code can be tested.

     Cells that include the tag `### Test your code. Run this.` cannot be edited. Run them as they are.

```python
import test_learner_implementation
```

## Exercise 1: Unwrapping the Data üéÅ

**Instructions:**

- The `ex1_helper_functions.py` file includes two functions:
    -  `read_candy_data`: This function will help you open up the candy data file and see what's inside.  Think of it like opening a box of chocolates! üç´
    - `display_table`: This handy function takes the candy data you've read and displays it neatly.

**Your task:**

-  Let's import both of these helpful functions from the `ex1_helper_functions` file. Remember to use the `*` to import everything! 

```python
# Import using the format "from file_name import all (*)"
### Add your import statment here

########## Solution
from ex1_helper_functions import *
##########
```

**Note:** Once you see the <span style="color: green;">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected.

```python
### Test your code. Run this.

test_learner_implementation.check_ex1_import_statement()
```

**Your task:**

*   Now, let's put that `read_candy_data` function to work!  Use it to read the file `candy_data.csv`. 
    *   Make sure you pass the file name `candy_data.csv` as a string to the function.

```python
# # Use 'read_candy_data' to read the file `candy_data.csv`
# candy_data = ### Add your code here

# # Display the contents loaded into the `candy_data` variable
# display_table(candy_data)

########## Solution
candy_data = read_candy_data('candy_data.csv')
display_table(candy_data) ### this function makes sure the import will be done and used as expected
##########
```

#### Expected Output

| Candy Name            | Popularity Score | Price in USD |
|-----------------------|------------------|------------------|
| Twix  | 82  | 1.25               |
| PayDay     | 83  | 1.00               |
| .  | .               | .                 |
| .| .               | .                 |
| .    | .               | .                 |
| Rolo  | 84  | 1.00               |
| Dove Chocolate     | 84  | 1.00               |

```python
### Test your code. Run this.

test_learner_implementation.test_exercise_1(candy_data)
```

## Exercise 2:  Popularity Contest! üèÜ

**Instructions:**

- The `ex2_helper_functions.py` file has more tools for you!
    - `get_popularity_scores`: This function sifts through your candy data and pulls out just the popularity scores. Think of it like separating the cherry filling from the rest of the candy. üçí
    -  `print_scores`: This function takes a list of scores and displays them neatly for you.

**Your task:**

- Import the `get_popularity_scores` and `print_scores` functions from `ex2_helper_functions`.

```python
# Import using the format "from file_name import function_name_1, function_name_2"
### Add your import statment here

########## Solution
from ex2_helper_functions import get_popularity_scores, print_scores
##########
```

**Note:** Once you see the <span style="color: green;">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected.

```python
### Test your code. Run this.

test_learner_implementation.check_ex2_import_statement()
```

**Your task:**

*   Now, let's see those popularity scores! Use the `get_popularity_scores` function with the `candy_data` you loaded earlier. 

```python
# # Use 'get_popularity_scores' and pass in the lst `candy_data`
# popularity_scores = ### Add your code here

# # Print the `popularity_scores` list
# print_scores(popularity_scores)

########## Solution
popularity_scores = get_popularity_scores(candy_data)
print_scores(popularity_scores) ### this function makes sure the import will be done and used as expected
##########
```

#### Expected Output:

```
[92, 83, 85, 84, 83, 94, 84, 95, 84, 83, 91, 83, 88, 84, 84, 84, 84, 84, 84]
```

```python
### Test your code. Run this.

test_learner_implementation.test_exercise_2(popularity_scores)
```

## Exercise 3:  Finding the Average Sweet Spot üéØ

**Instructions:**

- Python has a special built-in toolbox called `statistics`.  It's like a secret compartment in your candy box full of useful tools! üß∞ 
- We're going to use the `mean` tool from this toolbox to find the average popularity score.

**Your task:**

- Import the `statistics` package and give it a nickname (an alias) - call it `stats`.

```python
# Import using the format "import module_name as alias"
# Use the alias name as "stats"
### Add your import statment here

########## Solution
import statistics as stats
##########
```

**Note:** Once you see the <span style="color: green;">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected.

```python
### Test your code. Run this.

test_learner_implementation.check_ex3_import_statement()
```

**Your task:**

*   Time to calculate!  Use the `mean` function from your `stats` toolbox (remember how to use an alias with the dot `.` ) to find the average popularity score of all the candies. 

<details>
    <summary><span style="color: blue; font-weight: bold;">Hint: (click here to open)</span></summary>
    <p>When using an alias, you can access any function from the module using the <code>.</code> (dot) character.</p>
</details>

```python
# # Access the "mean" function in "stats"
# # Pass "popularity_scores" to the mean function
# avg_popularity = ### Add your code here

# ### Print the average upto 2 decimal places
# print(f"Average Popularity Score: {avg_popularity:.2f}")

########## Solution
avg_popularity = stats.mean(popularity_scores)
print(f"Average Popularity Score: {avg_popularity:.2f}") ### this function makes sure the import will be done and used as expected
##########
```

#### Expected Output

```
Average Popularity Score: 85.95
```

```python
### Test your code. Run this.

test_learner_implementation.test_exercise_3(avg_popularity)
```

## Exercise 4:  The Top Candy Leaderboard  ü•á

**Instructions:**

- We have even more tools in our `ex4_helper_functions.py` file!
    -  `get_top_candies`:  This function is like a talent scout - it will find the candies whose popularity scores are above a certain level (the average popularity you calculated). 
    -  `display_pretty_table`:  This one makes the results look extra nice. ‚ú®

**Your task:**

- Import the entire file  `ex4_helper_functions`.

```python
# Import using the format "import file_name"
### Add your import statment here

########## Solution
import ex4_helper_functions
##########
```

**Note:** Once you see the <span style="color: green;">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected.

```python
### Test your code. Run this.

test_learner_implementation.check_ex4_import_statement()
```

**Your task:**

- Use the `get_top_candies` function to round up all the candies that have a popularity score higher than or equal to the `avg_popularity` you found. 

<details>
    <summary><span style="color: blue; font-weight: bold;">Hint: (click here to open)</span></summary>
    <p>When you have imported the entire module/local file, you can access any function from it using the <code>.</code> (dot) character.</p>
</details>

```python
# # Access the "get_top_candies" function in "ex4_helper_functions"
# # Pass "candy_data" and "avg_popularity" to the "get_top_candies" function
# top_candies = ### Add your code here

# ### Display the "top_candies" list
# ex4_helper_functions.display_pretty_table(top_candies)

########## Solution
top_candies = ex4_helper_functions.get_top_candies(candy_data, avg_popularity)
ex4_helper_functions.display_pretty_table(top_candies) ### this function makes sure the import will be done and used as expected
##########
```

#### Expected Output:

```
+------------+------------------+--------------+
| Candy Name | Popularity Score | Price in USD |
+------------+------------------+--------------+
|    Twix    |        92        |     1.25     |
|   M&M's    |        94        |     1.25     |
|  Snickers  |        95        |     1.25     |
|  Kit Kat   |        91        |     1.25     |
| Starburst  |        88        |     1.0      |
+------------+------------------+--------------+
```

```python
### Test your code. Run this.
    
test_learner_implementation.test_exercise_4(top_candies)    
```

## Exercise 5: Crafting the Perfect Description üìù

Great work identifying the top candies! üéâ Now, let's help the marketing team really sell these treats. üç´ You'll use the `get_llm_response` function to generate a short, catchy two-sentence description for each of our top candies. You can adjust the `temperature` and `content`  variables to fine-tune the responses from the LLM.  

**Remember:** lower `temperature` values will give you more focused and deterministic responses, while higher values introduce more creativity and randomness.

```python
from ex5_helper_functions import client
```

```python
def get_llm_response(prompt):
    completion = client.chat.completions.create(
#         model="gpt-4o-mini",
        model='gpt-35-turbo-16k',
        messages=[
            {
                "role": "system",
                "content": "You are an AI assistant.",
            },
            {"role": "user", "content": prompt},
        ],
        temperature=0.0,
    )
    response = completion.choices[0].message.content
    return response
```

```python
### Zarta to add test which checks if the "temperature" and "content" has been modified
```

```python
for candy in top_candies:
    
    prompt = f"""
    For the given candy name, {candy['Candy Name']}, write 2 sentence description of it.
    """
    
    response = get_llm_response(prompt)
    
    print(f"NAME: {candy['Candy Name']}")
    print(f"DESCRIPTION: {response}")
    print()
```
