{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3dcb2108",
   "metadata": {},
   "source": [
    "# Programming Assignment:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53553efd",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3cd5b9d0",
   "metadata": {},
   "source": [
    "Before you get started, as before, import `test_learner_implementation` so that your implementated code can be tested.\n",
    "\n",
    "     Cells that include the tag `### Test your code. Run this.` cannot be edited. Run them as they are."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5aca86a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import test_learner_implementation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "766e89c9",
   "metadata": {},
   "source": [
    "## Exercise 1\n",
    "\n",
    "**Instructions:**\n",
    "\n",
    "- `ex1_helper_functions.py` file includes two functions, `read_candy_data` and `display_table`\n",
    "\n",
    "**Your task:**\n",
    "\n",
    "- Import all (`*`) of the functions from the `ex1_helper_functions`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa100c23",
   "metadata": {
    "name": "import_cell_1"
   },
   "outputs": [],
   "source": [
    "# Import using the format \"from file_name import all (*)\"\n",
    "### Add your import statment here\n",
    "\n",
    "########## Solution\n",
    "from ex1_helper_functions import *\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4439fb97",
   "metadata": {},
   "source": [
    "**Note:** Once you see the <span style=\"color: green;\">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d9a7ab03",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<p style=\"color: green;\">Correct import statement used!</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.check_ex1_import_statement()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d1a7395",
   "metadata": {},
   "source": [
    "**Your task:**\n",
    "* Use the `read_candy_data` function to read the file `candy_data.csv`\n",
    "    * Pass the file name `candy_data.csv` as a string to the function `read_candy_data`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0e0c7cc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Candy Name</th>\n",
       "      <th>Popularity Score</th>\n",
       "      <th>Price in USD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Twix</td>\n",
       "      <td>92</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PayDay</td>\n",
       "      <td>83</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Reese's Peanut Butter Cups</td>\n",
       "      <td>85</td>\n",
       "      <td>1.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3 Musketeers</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Werther's Original</td>\n",
       "      <td>83</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>M&amp;M's</td>\n",
       "      <td>94</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Milky Way</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Snickers</td>\n",
       "      <td>95</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Crunch</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Laffy Taffy</td>\n",
       "      <td>83</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Kit Kat</td>\n",
       "      <td>91</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Twizzlers</td>\n",
       "      <td>83</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Starburst</td>\n",
       "      <td>88</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Almond Joy</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Jolly Rancher</td>\n",
       "      <td>84</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Butterfinger</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Hershey's Milk Chocolate</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Rolo</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Dove Chocolate</td>\n",
       "      <td>84</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # Use 'read_candy_data' to read the file `candy_data.csv`\n",
    "# candy_data = ### Add your code here\n",
    "\n",
    "# # Display the contents loaded into the `candy_data` variable\n",
    "# display_table(candy_data)\n",
    "\n",
    "########## Solution\n",
    "candy_data = read_candy_data('candy_data.csv')\n",
    "display_table(candy_data) ### this function makes sure the import will be done and used as expected\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dab4534",
   "metadata": {},
   "source": [
    "#### Expected Output\n",
    "\n",
    "| Candy Name            | Popularity Score | Price in USD |\n",
    "|-----------------------|------------------|------------------|\n",
    "| Twix  | 82  | 1.25               |\n",
    "| PayDay     | 83  | 1.00               |\n",
    "| .  | .               | .\n",
    "| .| .               | .\n",
    "| .    | .               | .\n",
    "| Rolo  | 84  | 1.00               |\n",
    "| Dove Chocolate     | 84  | 1.00               |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a305f20",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32mTest Passed. Your code is correct!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.test_exercise_1(candy_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00bd7c91",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "\n",
    "**Instructions:**\n",
    "\n",
    "- `ex2_helper_functions.py` file includes two functions, `get_popularity_scores` and `print_scores`\n",
    "\n",
    "**Your task:**\n",
    "\n",
    "- Import the two functions `get_popularity_scores` and `print_scores` from `ex2_helper_functions`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "20d91bec",
   "metadata": {
    "name": "import_cell_2"
   },
   "outputs": [],
   "source": [
    "# Import using the format \"from file_name import function_name_1, function_name_2\"\n",
    "### Add your import statment here\n",
    "\n",
    "########## Solution\n",
    "from ex2_helper_functions import get_popularity_scores, print_scores\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f499fed0",
   "metadata": {},
   "source": [
    "**Note:** Once you see the <span style=\"color: green;\">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "411f303c",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<p style=\"color: green;\">Correct import statement used!</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.check_ex2_import_statement()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a452896a",
   "metadata": {},
   "source": [
    "**Your task:**\n",
    "* Use the `get_popularity_scores` function to get all of the popularity scores from the list `candy_data`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2623ad05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[92, 83, 85, 84, 83, 94, 84, 95, 84, 83, 91, 83, 88, 84, 84, 84, 84, 84, 84]\n"
     ]
    }
   ],
   "source": [
    "# # Use 'get_popularity_scores' and pass in the lst `candy_data`\n",
    "# popularity_scores = ### Add your code here\n",
    "\n",
    "# # Print the `popularity_scores` list\n",
    "# print_scores(popularity_scores)\n",
    "\n",
    "########## Solution\n",
    "popularity_scores = get_popularity_scores(candy_data)\n",
    "print_scores(popularity_scores) ### this function makes sure the import will be done and used as expected\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57aea43d",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "\n",
    "```\n",
    "[92, 83, 85, 84, 83, 94, 84, 95, 84, 83, 91, 83, 88, 84, 84, 84, 84, 84, 84]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "76449d08",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32mTest Passed. Your code is correct!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.test_exercise_2(popularity_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "249a8406",
   "metadata": {},
   "source": [
    "## Exercise 3\n",
    "\n",
    "**Instructions:**\n",
    "\n",
    "- From the Python module `statistics` use the `mean` function.\n",
    "\n",
    "**Your task:**\n",
    "\n",
    "- Import the Python package `statistics` *as* `stats`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a5890a15",
   "metadata": {
    "name": "import_cell_3"
   },
   "outputs": [],
   "source": [
    "# Import using the format \"import module_name as alias\"\n",
    "# Use the alias name as \"stats\"\n",
    "### Add your import statment here\n",
    "\n",
    "########## Solution\n",
    "import statistics as stats\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a397dd9",
   "metadata": {},
   "source": [
    "**Note:** Once you see the <span style=\"color: green;\">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "db8c2f94",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<p style=\"color: green;\">Correct import statement used!</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.check_ex3_import_statement()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62d8fc64",
   "metadata": {},
   "source": [
    "**Your task:**\n",
    "\n",
    "* Calculate the mean populairty score of the list `popularity_scores`\n",
    "\n",
    "<details>\n",
    "    <summary><span style=\"color: blue; font-weight: bold;\">Hint: (click here to open)</span></summary>\n",
    "    <p>When using an alias, you can access any function from the module using the <code>.</code> (dot) character.</p>\n",
    "</details>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c4ec355c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Popularity Score: 85.95\n"
     ]
    }
   ],
   "source": [
    "# # Access the \"mean\" function in \"stats\"\n",
    "# # Pass \"popularity_scores\" to the mean function\n",
    "# avg_popularity = ### Add your code here\n",
    "\n",
    "# ### Print the average upto 2 decimal places\n",
    "# print(f\"Average Popularity Score: {avg_popularity:.2f}\")\n",
    "\n",
    "########## Solution\n",
    "avg_popularity = stats.mean(popularity_scores)\n",
    "print(f\"Average Popularity Score: {avg_popularity:.2f}\") ### this function makes sure the import will be done and used as expected\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a2c0552",
   "metadata": {},
   "source": [
    "#### Expected Output\n",
    "\n",
    "```\n",
    "Average Popularity Score: 85.95\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "12103e04",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32mTest Passed. Your code is correct!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.test_exercise_3(avg_popularity)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9b6238f",
   "metadata": {},
   "source": [
    "## Exercise 4:\n",
    "\n",
    "\n",
    "**Instructions:**\n",
    "\n",
    "- `ex4_helper_functions.py` file includes the functions, `get_top_candies` and `display_pretty_table`\n",
    "\n",
    "**Your task:**\n",
    "\n",
    "- Import the entire `ex4_helper_functions`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4ef5fbb0",
   "metadata": {
    "name": "import_cell_4"
   },
   "outputs": [],
   "source": [
    "# Import using the format \"import file_name\"\n",
    "### Add your import statment here\n",
    "\n",
    "########## Solution\n",
    "import ex4_helper_functions\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "225e461c",
   "metadata": {},
   "source": [
    "**Note:** Once you see the <span style=\"color: green;\">Correct import statement used!</span> message, it means you can move on to the next step. Otherwise, it would mean your import statment or its format is not as expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "edef3dac",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<p style=\"color: green;\">Correct import statement used!</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "\n",
    "test_learner_implementation.check_ex4_import_statement()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f12f2ac",
   "metadata": {},
   "source": [
    "**Your task:**\n",
    "\n",
    "- Use the `get_top_candies` function to get the candies with the popularity score equal or greater than the `avg_popularity` from the list `candy_data`\n",
    "\n",
    "<details>\n",
    "    <summary><span style=\"color: blue; font-weight: bold;\">Hint: (click here to open)</span></summary>\n",
    "    <p>When you have imported the entire module/local file, you can access any function from it using the <code>.</code> (dot) character.</p>\n",
    "</details>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8c3e39ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+------------------+--------------+\n",
      "| Candy Name | Popularity Score | Price in USD |\n",
      "+------------+------------------+--------------+\n",
      "|    Twix    |        92        |     1.25     |\n",
      "|   M&M's    |        94        |     1.25     |\n",
      "|  Snickers  |        95        |     1.25     |\n",
      "|  Kit Kat   |        91        |     1.25     |\n",
      "| Starburst  |        88        |     1.0      |\n",
      "+------------+------------------+--------------+\n"
     ]
    }
   ],
   "source": [
    "# # Access the \"get_top_candies\" function in \"ex4_helper_functions\"\n",
    "# # Pass \"candy_data\" and \"avg_popularity\" to the \"get_top_candies\" function\n",
    "# top_candies = ### Add your code here\n",
    "\n",
    "# ### Display the \"top_candies\" list\n",
    "# ex4_helper_functions.display_pretty_table(top_candies)\n",
    "\n",
    "########## Solution\n",
    "top_candies = ex4_helper_functions.get_top_candies(candy_data, avg_popularity)\n",
    "ex4_helper_functions.display_pretty_table(top_candies) ### this function makes sure the import will be done and used as expected\n",
    "##########"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c43f91d2",
   "metadata": {},
   "source": [
    "#### Expected Output:\n",
    "\n",
    "```\n",
    "+------------+------------------+--------------+\n",
    "| Candy Name | Popularity Score | Price in USD |\n",
    "+------------+------------------+--------------+\n",
    "|    Twix    |        92        |     1.25     |\n",
    "|   M&M's    |        94        |     1.25     |\n",
    "|  Snickers  |        95        |     1.25     |\n",
    "|  Kit Kat   |        91        |     1.25     |\n",
    "| Starburst  |        88        |     1.0      |\n",
    "+------------+------------------+--------------+\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d63d8e47",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32mTest Passed. Your code is correct!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "### Test your code. Run this.\n",
    "    \n",
    "test_learner_implementation.test_exercise_4(top_candies)    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffd5dec7",
   "metadata": {},
   "source": [
    "## Exercise 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "46b30c32",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ex5_helper_functions import client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0745c0ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_llm_response(prompt):\n",
    "    completion = client.chat.completions.create(\n",
    "#         model=\"gpt-4o-mini\",\n",
    "        model='gpt-35-turbo-16k',\n",
    "        messages=[\n",
    "            {\n",
    "                \"role\": \"system\",\n",
    "                \"content\": \"You are an AI assistant.\",\n",
    "            },\n",
    "            {\"role\": \"user\", \"content\": prompt},\n",
    "        ],\n",
    "        temperature=0.0,\n",
    "    )\n",
    "    response = completion.choices[0].message.content\n",
    "    return response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a8a8603b",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Zarta to add test which checks if the \"temperature\" and \"content\" has been modified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1618c7de",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1c6f0e41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NAME: Twix\n",
      "DESCRIPTION: Twix is a popular chocolate candy bar that consists of a biscuit base topped with caramel and coated in milk chocolate. It is known for its distinctive shape and the satisfying combination of crunchy, chewy, and creamy textures.\n",
      "\n",
      "NAME: M&M's\n",
      "DESCRIPTION: M&M's are bite-sized chocolate candies with a colorful candy shell. They are known for their iconic \"m\" logo and come in a variety of flavors, including milk chocolate, peanut, and crispy.\n",
      "\n",
      "NAME: Snickers\n",
      "DESCRIPTION: Snickers is a popular candy bar known for its combination of nougat, caramel, peanuts, and milk chocolate. It offers a satisfying blend of sweet and salty flavors, making it a beloved treat for chocolate and nut lovers alike.\n",
      "\n",
      "NAME: Kit Kat\n",
      "DESCRIPTION: Kit Kat is a popular chocolate-covered wafer bar that is known for its distinctive snap when broken apart. It features layers of crispy wafer and smooth milk chocolate, making it a delicious and satisfying treat for chocolate lovers.\n",
      "\n",
      "NAME: Starburst\n",
      "DESCRIPTION: Starburst is a popular fruit-flavored candy known for its chewy texture and vibrant flavors. Each piece is individually wrapped, making it convenient for on-the-go snacking or sharing with friends.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for candy in top_candies:\n",
    "    \n",
    "    prompt = f\"\"\"\n",
    "    For the given candy name, {candy['Candy Name']}, write 2 sentence description of it.\n",
    "    \"\"\"\n",
    "    \n",
    "    response = get_llm_response(prompt)\n",
    "    \n",
    "    print(f\"NAME: {candy['Candy Name']}\")\n",
    "    print(f\"DESCRIPTION: {response}\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "870b954e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9dad298",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f8b242d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86aefafe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b11e7698",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7d37afd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
