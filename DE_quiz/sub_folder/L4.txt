In
 this lesson, I hope you try running your own Python code rather than just listening
 to me talk and watching me run the code. Later in this video, I
'd like to invite you to pause this video and actually go into the Jupyter notebook region of this learning environment and run your own code. I think learning to
 code has some similarities to learning a new human language. You can listen to a teacher tell you about how to speak French or Spanish or some other language, but
 unless you open your mouth and practice speaking that language yourself, how much you can actually learn, you know will be limited. And learning to use a programming language is like that too. It really helps if you don't just watch me
 do it. But if you actually pause the video and at the right time, which will come in a little bit, try running the code yourself. In the Jupyter Notebook region, hopefully you see this. And the first thing I want you
 to do is use the mouse to click on this print hello World and then run that command. So, I am going to do that right now. Shift. Enter. And now the computer prints "Hello world." Why don't you pause the video and go do that yourself? Just hit shift, enter or shift
 return and your computer will print "Hello world." If you just ran "Hello world.", then congratulations! You've just joined millions of others that started their computer programming adventure by running this line of code. Now, let's go on to see how we can use a chatbot to write slightly more complex programs.
 I'm going to demonstrate a sequence of operations first, and then after that I'd like you to pause the video and go through the same thing yourself. I'm going to open the chatbot and then type in this prompt. Modify the code below to have it say hello to me. Here's the
 code. My name is Andrew and so here, we'd like to write code to say "hello" not to the world, but to you. Let me show you how I'm going to do that. So, pop up the chatbot by clicking the chat button at the bottom. And then I'm
 going to say "modify the code below to have it say hello to me." The code is print "Hello world." And then my name is Andrew. And when you do this, please substitute your own name, for mine. And now it says you can modify the code like this. Print. Hello, Andrew.
 And now I'm going to click this button to copy the code. And I'm then going to paste the code and hit Shift Enter. And now it will say "hello Andrew." In case you want to copy paste the text from here into the chatbot, that's fine too. You can highlight just
 text and then hit, you know, command C or control C and copy-paste this into the chatbot. So, what I'd like you to do now is go ahead and pause the video. And why don't you get the chatbot to modify this code to have it say hello to you and then paste
 the code into the cell and have your computer say hello to you. So, hopefully you had fun doing that for the next little exercise let's have a computer say hello to someone you love. So, to do this I'm going to copy paste here. Let me type in the names of my kids.
 Happy and Neo. My daughter is called Nova but she likes to go by Happy. So that's, hello to my kids. Why don't you do that as well, get the computer, say hello. Not just the world. Not just to you, but to someone that you love. Now, you
 may be wondering what this text is. There's a pound sign or a hash sign followed by a bunch of text here. This is what's called a comment in the code. So this Jupyter notebook cell says pound sign or hash sign. There's a comment Python will ignore the sign. So, if
 I click into the cell, and feel free to follow along in your own Jupyter notebook and hit shift enter. What do you think will happen? Right. Shift. Enter. Nothing at all happens. It generates no output, the computer does nothing at all. Because as developers, we find it sometimes it's useful
 to write some text to remind ourselves or to let someone else reading our code know what the code is about. And so a comment is a type of text that we include in our programs that the computer knows to ignore. In contrast, this is a print command that we also say as a print statement. So, if
 I run this then it says it prints out this is a print statement. Now let's look at a more complex Jupyter notebook coding cell. So that's what one of these things is called. And see what it does. So, the first three lines are comments. So it will ignore this when you run
 the cell. Here's a print command or print statement. Says "print Hello Andrew." And then here, I'm going to say follow the initial print command. How is your day going? So what do you think will happen when I run to cell? There are six lines in this cell, but only
 two of them are commands and the other four are comments So, when I run this, it will print "Hello, Andrew. How's your day going?" And all the comments are ignored. So again, anytime, please pause the video. Go ahead and click into the Jupyter notebook cell and hit shift enter so
 you can see this for yourself and if you feel so inspired, feel free to modify this. You know, go ahead and add another line of comment, blah blah blah and run that and actually ignores these extra lines of comments as well. Now, it turns out that when we're programming, all of us make
 mistakes all the time. I make typos, I make mistakes when I code. That's a very normal part of programming. So, here's a piece of code with an error in it. We call errors in coding bugs. But when you run code with an error or a bug in it, then sometimes
 you get an error message like this. Sometimes I get an error message. I go "Oh boy, I have no idea what this means." Fortunately, you can ask a chatbot how to fix the code. So, let's take this buggy line of code, and let's ask the chatbot to fix it
 for us. Here's a chatbot. I'm going to clear the conversation and then I'm going to ask it "what is wrong with this code and how do I fix it?" And then it gives an explanation. "The issue with the code is quotation marks around a string are not matching, here
's the corrected code." Print "Hello Andrew." So, I can actually go back to my notebook and edit the code. I just paste in the right answer. You can edit it however you want and then run it and this fixes it. So, finding fixing errors, also known as finding fixing bugs in computer
 programming, has really changed with chatbots because for many, these simple mistakes, such as little typos, which we had here chatbots are very good at spotting what went wrong. And if you're interested, you can also use a chatbot to explain error messages to you. So, for example, if it'
s asked "what does this error message mean?" And it paste it, you know, the error message that we saw then it actually gives a pretty decent explanation for what's going on. And right now you may not know what some of these terms mean, like what is a string or what is scanning the string
. By the end of this short course, you will have learned a lot of the vocabulary, like what is a string in Python to help you understand messages like these. So, that almost takes us to the end of the lesson. After you're done watching this video, before going on to the next lesson,
 I hope you go through some of these little practice exercises. So I'll do the first one. So this see, "print blue" that is my favorite color. It's also my son's favorite color. Not my daughter's and I hope you practice writing and running print statements to have it
 say "how you feeling today?" Go ahead, make a genuine error. You know, we all write code with errors or bugs it's good for you to sometimes do that too, even deliberately. And then see if you get the chatbot to fix the error. So, I hope you have fun with these practice
 exercises. And when you're done, let's go on to the next lesson. We'll start to talk about data, which is a key ingredient of both AI as well as of Python programs. I'll see you in the next video.